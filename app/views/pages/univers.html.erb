<div class="test-home-page">

  <svg class="textsvg" xmlns="http://www.w3.org/2000/svg" xml:lang="en"
  xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 500 500">
    <title>Circular Text Path</title>

    <defs>
        <path id="textcircle"
            d="M250,400
                a150,150 0 0,1 0,-300a150,150 0 0,1 0,300Z"
            transform="rotate(12,250,250)"/>
    </defs>
    <rect width="100%" height="100%" fill="none" />
    <text>
        <textPath xlink:href="#textcircle"
                aria-label="All for One &amp; One for All"
                textLength="942">MERLIMONT -TERRE D'OPALE-</textPath>
    </text>
  </svg>

  <div class="test-home-container">

    <div class="test-home-first-div">

      <div class="test-nav">
        <div class="test-nav-left">
          <!-- <%= link_to "Merlimont", "#" %> -->
          <%= link_to root_path do %>
            <%= image_tag('home/MerlimontB.png') %>
          <% end %>
        </div>

        <div class="test-nav-right">
          <%= link_to "Galerie", galerie_path %>
          <%= link_to "Faune & Flore", fauneflore_path(anchor: 'top-of-page'), data: { turbo: false } %>
          <%= link_to "Il etait une fois", merlimontdavant_path %>
          <%= link_to "A propos", about_path, data: { turbo: false } %>
        </div>

      </div>

      <div class="svg-container">
        <svg>
          <clipPath id="text-overlay">
            <path  d="M565.5 334.502L32.5002 1025.5C32.5002 1025.5 -4.49999 1087.5 1.5002 1137.5C3.50001 1165.5 8.8371 1185.9 32.5002 1191.5C59 1187 67.1648 1169.77 85.0002 1151C108 1114 114.5 1107.5 136 1062C174 990 145 1043 240.5 889.5C418.009 604.184 742.5 272 742.5 272C742.5 272 796.5 205 835 218C862.5 232.5 825 311.5 825 311.5C740 504.5 648 743.5 648 743.5C592.5 881.5 661.5 881.5 661.5 881.5C661.5 881.5 716 913 788 790C865.5 666.5 1127.5 378 1209.5 351.5C1241 351.5 1220.5 383.5 1220.5 383.5C949 1091.5 1218.5 1135 1218.5 1135C1394 1171 1556.5 996 1556.5 996C1593.5 956.5 1619.05 930.192 1628 911.5C1655 813.5 1501.5 949 1501.5 949C1382 1043 1339.5 1043 1339.5 1043C1212.5 1040.5 1264.5 778.5 1264.5 778.5C1336 474.5 1454.5 259.5 1454.5 259.5C1498 169 1410.5 184.5 1410.5 184.5C1167.5 225 923 523 923 523C923 523 919.5 528.5 908 526C896.5 523.5 898.5 514.5 898.5 514.5C912.5 467.5 989 272 989 272C1100.5 18 978 6.00153 978 6.00153C877.5 -46.9986 565.5 334.502 565.5 334.502Z" fill="black" stroke="black"/>
            <path d="M1690 696.5C1705.07 597.064 1637.5 495.5 1529 495.5C1420.5 495.5 1347.76 569.939 1346.5 668C1345.22 767.277 1429.88 850.727 1529 845C1614.39 840.066 1677.18 781.07 1690 696.5Z" fill="black" stroke="black"/>
          </clipPath>
        </svg>
      </div>


      <div class="videocontainer">
        <div class="wrapperr" id="lem">
          <video class="clipped-video" muted loop autoplay>
            <source src="https://design2seo.com/assets/blog/svg-clipping/video_waves3.mp4"></source>
          </video>
        </div>
      </div>


      <div class="home-dunes">
        <%= image_tag('home/home_dunes.svg') %>
      </div>

      <div class="home-bas-dunes">
        <div class="home-petite-trace-container">
          <%= image_tag('home/home_petite_trace.svg') %>
        </div>
      </div>

    </div>

    <div class="test-home-seconde-div">

      <div class="home-traces">
        <%= image_tag('home/home_trace.svg') %>
      </div>

      <div class="test-home-title-container">
        <div class="home-presentation-title-shadow">
          <div class="home-presentation-parasol-container">
            <h1>Merlimont</h1>
            <div class="home-presentation-parasol">
              <%= image_tag('home/parasol.svg') %>
            </div>
          </div>
        </div>
        <h1>Merlimont</h1>
      </div>

      <div class="test-home-seconde-div-text-img-container">

        <div class="test-home-seconde-div-text-container">
          <p>Nichée entre dunes sauvages et plages de sable fin, Merlimont est une destination côtière idyllique où le charme authentique de la côte d'Opale rencontre la tranquillité et la beauté naturelle.</p>
          <%= image_tag('testhome/testtraittrois.png') %>

        </div>

        <div class="test-home-seconde-div-img-container">
          <div class="test-home-seconde-div-img-content">
            <%= image_tag('testhome/testcoeurquatre.png') %>
          </div>
        </div>

      </div>

      <div class="home-activites-vague-haut">
        <%= image_tag('home/home_vague_haut.png') %>
        <div class="wave"></div>
      </div>

    </div>

    <div class="test-home-third-div">
      <div class="test-home-title-container">
        <div class="home-presentation-title-shadow">
          <div class="home-presentation-parasol-container">
            <h1>Activités</h1>
            <div class="home-presentation-cerfvolant">
              <%= image_tag('testhome/kite.png') %>
            </div>
          </div>
        </div>
        <h1>Activités</h1>
      </div>

      <div class="home-activite-container">
        <div class="home-activite-card-carousel">

          <div class="card" id="1">

            <div class="card-div-image">
              <div class="image-container" style="background-image: url('<%= cl_image_path(@activites[0].photo.key) %>');">
              </div>
            </div>

            <div class="card-div-text">
              <p class="activite-title"><%= @activites[0].title %></p>
              <%= link_to "Voir plus", activite_path(@activites[0]) %>
            </div>

          </div>

          <div class="card" id="2">

            <div class="card-div-image">
              <div class="image-container" style="background-image: url('<%= cl_image_path(@activites[1].photo.key) %>');">
              </div>
            </div>

            <div class="card-div-text">
              <p class="activite-title"><%= @activites[1].title %></p>
              <%= link_to "Voir plus", activite_path(@activites[1]) %>
            </div>

          </div>

          <div class="card" id="3">

            <div class="card-item-one">
              <div class="card-item-image-container">
                <%= image_tag('testhome/golfmaindeux.png') %>
              </div>
            </div>

            <div class="card-item-two">
              <div class="card-item-image-container">
                <%= image_tag('testhome/golftee.png') %>

              </div>
            </div>

            <div class="card-item-three">
              <div class="card-item-image-container">
                <%= image_tag('testhome/golf_item_cinq.png') %>
              </div>
            </div>

            <div class="card-item-four">
              <div class="card-item-image-container">
                <%= image_tag('testhome/golf_item_club.png') %>
              </div>
            </div>

            <div class="card-item-five">
              <div class="card-item-image-container">
                <%= image_tag('testhome/golf_item_cinq.png') %>
              </div>
            </div>



            <div class="card-div-image">
              <div class="image-container" style="background-image: url('<%= cl_image_path(@activites[1].photo.key) %>');">
              </div>
            </div>

            <div class="card-div-text">
              <p class="activite-title"><%= @activites[2].title %></p>
              <%= link_to "Voir plus", activite_path(@activites[2]) %>
            </div>

          </div>

          <div class="card" id="4">

            <div class="card-div-image">
              <div class="image-container" style="background-image: url('<%= cl_image_path(@activites[3].photo.key) %>');">
              </div>
            </div>

            <div class="card-div-text">
              <p class="activite-title"><%= @activites[3].title %></p>
              <%= link_to "Voir plus", activite_path(@activites[3]) %>
            </div>

          </div>

          <div class="card" id="5">

            <div class="card-div-image">
              <div class="image-container" style="background-image: url('<%= cl_image_path(@activites[4].photo.key) %>');">
              </div>
            </div>

            <div class="card-div-text">
              <p class="activite-title"><%= @activites[4].title %></p>
              <%= link_to "Voir plus", activite_path(@activites[4]) %>
            </div>

          </div>

        </div>
        <a href="#" class="visuallyhidden card-controller">Carousel controller</a>
      </div>

    </div>


  </div>
</div>


<!-- parallax -->

<script type="text/javascript">
    let lem = document.getElementById("lem");

    window.addEventListener('scroll', function(){
        var value = window.scrollY;
        lem.style.top = value * 0.7 + 'px';
    })
</script>


<!-- suiveur de souris -->

<script>

  const circleSvg = document.querySelector('.textsvg')
  const btn = document.querySelector('button')

  let mouseX = 0
  let mouseY = 0
  //let intv = 0

  window.addEventListener('mousemove', (event) => {
      // circleSvg.style.top = event.clientY - 45;
      // circleSvg.style.left = event.clientX - 45;

      mouseY = (event.clientY) - (45)
      mouseX = (event.clientX) - (45)

  })

  let scrollY = 0

  window.addEventListener('scroll', (event) => {
      // circleSvg.style.top = event.clientY - 45;
      // circleSvg.style.left = event.clientX - 45;

      scrollY =  window.scrollY
      console.log(scrollY)

  })





  const mouseMove = () => {
      //intv += 1

      circleSvg.style.top = mouseY + scrollY + 'px'
      circleSvg.style.left = mouseX + 'px'


      //circleSvg.style.opacity = 1 + Math.sin(intv * .04)
      //console.log(Math.sin(intv * .04))

      window.requestAnimationFrame(mouseMove)
  }

  mouseMove()





  var tl = gsap.timeline({defaults: {ease: "power2.inOut"}})

  tl.to(circleSvg, {width: 0, opacity: 0})
  tl.to('body, button', {background: 'white'})
  tl.pause()

  btn.addEventListener('click', () => {
      tl.play()
  })

</script>

<!-- drag and drop -->

<script>
  const cardsContainer = document.querySelector(".home-activite-card-carousel");
  const cardsController = document.querySelector(".home-activite-card-carousel + .card-controller")

  class DraggingEvent {
    constructor(target = undefined) {
      this.target = target;
    }

    event(callback) {
      let handler;

      this.target.addEventListener("mousedown", e => {
        e.preventDefault()

        handler = callback(e)

        window.addEventListener("mousemove", handler)

        document.addEventListener("mouseleave", clearDraggingEvent)

        window.addEventListener("mouseup", clearDraggingEvent)

        function clearDraggingEvent() {
          window.removeEventListener("mousemove", handler)
          window.removeEventListener("mouseup", clearDraggingEvent)
          document.removeEventListener("mouseleave", clearDraggingEvent)

          handler(null)
        }
      })

      this.target.addEventListener("touchstart", e => {
        handler = callback(e)

        window.addEventListener("touchmove", handler)

        window.addEventListener("touchend", clearDraggingEvent)

        document.body.addEventListener("mouseleave", clearDraggingEvent)

        function clearDraggingEvent() {
          window.removeEventListener("touchmove", handler)
          window.removeEventListener("touchend", clearDraggingEvent)

          handler(null)
        }
      })
    }

    // Get the distance that the user has dragged
    getDistance(callback) {
      function distanceInit(e1) {
        let startingX, startingY;

        if ("touches" in e1) {
          startingX = e1.touches[0].clientX
          startingY = e1.touches[0].clientY
        } else {
          startingX = e1.clientX
          startingY = e1.clientY
        }


        return function(e2) {
          if (e2 === null) {
            return callback(null)
          } else {

            if ("touches" in e2) {
              return callback({
                x: e2.touches[0].clientX - startingX,
                y: e2.touches[0].clientY - startingY
              })
            } else {
              return callback({
                x: e2.clientX - startingX,
                y: e2.clientY - startingY
              })
            }
          }
        }
      }

      this.event(distanceInit)
    }
  }


  class CardCarousel extends DraggingEvent {
    constructor(container, controller = undefined) {
      super(container)

      // DOM elements
      this.container = container
      this.controllerElement = controller
      this.cards = container.querySelectorAll(".card")

      // Carousel data
      this.centerIndex = (this.cards.length - 1) / 2;
      this.cardWidth = this.cards[0].offsetWidth / this.container.offsetWidth * 100
      this.xScale = {};

      // Resizing
      window.addEventListener("resize", this.updateCardWidth.bind(this))

      if (this.controllerElement) {
        this.controllerElement.addEventListener("keydown", this.controller.bind(this))
      }


      // Initializers
      this.build()

      // Bind dragging event
      super.getDistance(this.moveCards.bind(this))
    }

    updateCardWidth() {
      this.cardWidth = this.cards[0].offsetWidth / this.container.offsetWidth * 100

      this.build()
    }

    build(fix = 0) {
      for (let i = 0; i < this.cards.length; i++) {
        const x = i - this.centerIndex;
        const scale = this.calcScale(x)
        const scale2 = this.calcScale2(x)
        const zIndex = -(Math.abs(i - this.centerIndex))

        const leftPos = this.calcPos(x, scale2)


        this.xScale[x] = this.cards[i]

        this.updateCards(this.cards[i], {
          x: x,
          scale: scale,
          leftPos: leftPos,
          zIndex: zIndex
        })
      }
    }


    controller(e) {
      const temp = {...this.xScale};

        if (e.keyCode === 39) {
          // Left arrow
          for (let x in this.xScale) {
            const newX = (parseInt(x) - 1 < -this.centerIndex) ? this.centerIndex : parseInt(x) - 1;

            temp[newX] = this.xScale[x]
          }
        }

        if (e.keyCode == 37) {
          // Right arrow
          for (let x in this.xScale) {
            const newX = (parseInt(x) + 1 > this.centerIndex) ? -this.centerIndex : parseInt(x) + 1;

            temp[newX] = this.xScale[x]
          }
        }

        this.xScale = temp;

        for (let x in temp) {
          const scale = this.calcScale(x),
                scale2 = this.calcScale2(x),
                leftPos = this.calcPos(x, scale2),
                zIndex = -Math.abs(x)

          this.updateCards(this.xScale[x], {
            x: x,
            scale: scale,
            leftPos: leftPos,
            zIndex: zIndex
          })
        }
    }

    calcPos(x, scale) {
      let formula;

      if (x < 0) {
        formula = (scale * 100 - this.cardWidth) / 2

        return formula

      } else if (x > 0) {
        formula = 100 - (scale * 100 + this.cardWidth) / 2

        return formula
      } else {
        formula = 100 - (scale * 100 + this.cardWidth) / 2

        return formula
      }
    }

    updateCards(card, data) {
      if (data.x || data.x == 0) {
        card.setAttribute("data-x", data.x)
      }

      if (data.scale || data.scale == 0) {
        card.style.transform = `scale(${data.scale})`

        if (data.scale == 0) {
          card.style.opacity = data.scale
        } else {
          card.style.opacity = 1;
        }
      }

      if (data.leftPos) {
        card.style.left = `${data.leftPos}%`
      }

      if (data.zIndex || data.zIndex == 0) {
        if (data.zIndex == 0) {
          card.classList.add("highlight")
        } else {
          card.classList.remove("highlight")
        }

        card.style.zIndex = data.zIndex
      }
    }

    calcScale2(x) {
      let formula;

      if (x <= 0) {
        formula = 1 - -1 / 5 * x

        return formula
      } else if (x > 0) {
        formula = 1 - 1 / 5 * x

        return formula
      }
    }

    calcScale(x) {
      const formula = 1 - 1 / 5 * Math.pow(x, 2)

      if (formula <= 0) {
        return 0
      } else {
        return formula
      }
    }

    checkOrdering(card, x, xDist) {
      const original = parseInt(card.dataset.x)
      const rounded = Math.round(xDist)
      let newX = x

      if (x !== x + rounded) {
        if (x + rounded > original) {
          if (x + rounded > this.centerIndex) {

            newX = ((x + rounded - 1) - this.centerIndex) - rounded + -this.centerIndex
          }
        } else if (x + rounded < original) {
          if (x + rounded < -this.centerIndex) {

            newX = ((x + rounded + 1) + this.centerIndex) - rounded + this.centerIndex
          }
        }

        this.xScale[newX + rounded] = card;
      }

      const temp = -Math.abs(newX + rounded)

      this.updateCards(card, {zIndex: temp})

      return newX;
    }

    moveCards(data) {
      let xDist;

      if (data != null) {
        this.container.classList.remove("smooth-return")
        xDist = data.x / 250;
      } else {


        this.container.classList.add("smooth-return")
        xDist = 0;

        for (let x in this.xScale) {
          this.updateCards(this.xScale[x], {
            x: x,
            zIndex: Math.abs(Math.abs(x) - this.centerIndex)
          })
        }
      }

      for (let i = 0; i < this.cards.length; i++) {
        const x = this.checkOrdering(this.cards[i], parseInt(this.cards[i].dataset.x), xDist),
              scale = this.calcScale(x + xDist),
              scale2 = this.calcScale2(x + xDist),
              leftPos = this.calcPos(x + xDist, scale2)


        this.updateCards(this.cards[i], {
          scale: scale,
          leftPos: leftPos
        })
      }
    }
  }

  const carousel = new CardCarousel(cardsContainer)
</script>

<!-- transition color svg -->
<script>
  // Sélectionner l'élément .test-home-seconde-div
  const secondeDiv = document.querySelector(".test-home-third-div");

  // Ajouter un écouteur d'événements pour l'événement "mouseover"
  secondeDiv.addEventListener("mouseover", function() {
    // Sélectionner tous les éléments <text> à l'intérieur de .test-home-page
    const textElements = document.querySelectorAll(".test-home-page text");

    // Parcourir tous les éléments <text> et modifier leur style fill
    textElements.forEach(function(textElement) {
      textElement.style.fill = "#ffffffdc";
    });
  });

  // Ajouter un écouteur d'événements pour l'événement "mouseout"
  secondeDiv.addEventListener("mouseout", function() {
    // Sélectionner tous les éléments <text> à l'intérieur de .test-home-page
    const textElements = document.querySelectorAll(".test-home-page text");

    // Parcourir tous les éléments <text> et modifier leur style fill
    textElements.forEach(function(textElement) {
      textElement.style.fill = "#023646dc";
    });
  });
</script>
